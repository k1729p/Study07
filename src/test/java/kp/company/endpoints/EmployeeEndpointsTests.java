package kp.company.endpoints;

import static kp.TestConstants.ABSENT_EMPLOYEE_ID;
import static kp.TestConstants.CREATED_EMPLOYEE_CONTENT;
import static kp.TestConstants.CREATED_EMPLOYEE_F_NAME;
import static kp.TestConstants.CREATED_EMPLOYEE_ID_DEP_HREF;
import static kp.TestConstants.CREATED_EMPLOYEE_ID_HREF;
import static kp.TestConstants.CREATED_EMPLOYEE_L_NAME;
import static kp.TestConstants.EMPLOYEES_URL;
import static kp.TestConstants.EXPECTED_DEPARTMENT_NAME;
import static kp.TestConstants.EXPECTED_EMPLOYEE_F_NAME;
import static kp.TestConstants.EXPECTED_EMPLOYEE_ID_DEP_HREF;
import static kp.TestConstants.EXPECTED_EMPLOYEE_ID_URL;
import static kp.TestConstants.EXPECTED_EMPLOYEE_L_NAME;
import static kp.TestConstants.NAME_LIKE;
import static kp.TestConstants.ROOT_URL;
import static kp.TestConstants.UPDATED_EMPLOYEE_CONTENT;
import static kp.TestConstants.UPDATED_EMPLOYEE_F_NAME;
import static kp.TestConstants.UPDATED_EMPLOYEE_L_NAME;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.hateoas.MediaTypes;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;

import kp.Constants;
import kp.company.TestDatasetLoader;
import kp.company.domain.Employee;

/**
 * The tests for the {@link Employee} with server-side support using
 * {@link MockMvc}.<br>
 * The endpoints were generated by Spring Data from the repositories.
 */
@SpringBootTest
@AutoConfigureMockMvc
class EmployeeEndpointsTests {

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private TestDatasetLoader testDatasetLoader;

	private static final boolean VERBOSE = false;

	/**
	 * The constructor.
	 */
	EmployeeEndpointsTests() {
		super();
	}

	/**
	 * Should create the {@link Employee}.<br>
	 * Tests a <b>POST</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldCreateEmployee() throws Exception {
		// GIVEN
		final MockHttpServletRequestBuilder requestBuilder = post(EMPLOYEES_URL).accept(MediaTypes.HAL_JSON_VALUE)
				.content(CREATED_EMPLOYEE_CONTENT).contentType(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isCreated());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("firstName").value(CREATED_EMPLOYEE_F_NAME));
		resultActions.andExpect(jsonPath("lastName").value(CREATED_EMPLOYEE_L_NAME));
		resultActions.andExpect(jsonPath("_links.self.href").value(CREATED_EMPLOYEE_ID_HREF));
		resultActions.andExpect(jsonPath("_links.employee.href").value(CREATED_EMPLOYEE_ID_HREF));
		resultActions.andExpect(jsonPath("_links.department.href").value(CREATED_EMPLOYEE_ID_DEP_HREF));
	}

	/**
	 * Should update the {@link Employee}.<br>
	 * Tests a <b>PATCH</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldUpdateEmployeeUsingPatch() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = patch(EXPECTED_EMPLOYEE_ID_URL)
				.accept(MediaTypes.HAL_JSON_VALUE).content(UPDATED_EMPLOYEE_CONTENT)
				.contentType(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		checkEmployee(resultActions, UPDATED_EMPLOYEE_F_NAME, UPDATED_EMPLOYEE_L_NAME);
	}

	/**
	 * Should update the {@link Employee}.<br>
	 * Tests a <b>PUT</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldUpdateEmployeeUsingPut() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = put(EXPECTED_EMPLOYEE_ID_URL)
				.accept(MediaTypes.HAL_JSON_VALUE).content(UPDATED_EMPLOYEE_CONTENT)
				.contentType(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		checkEmployee(resultActions, UPDATED_EMPLOYEE_F_NAME, UPDATED_EMPLOYEE_L_NAME);
	}

	/**
	 * Should get '404 Not Found' error response when updating the absent
	 * {@link Employee}.<br>
	 * Tests a <b>PATCH</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldGetNotFoundErrorOnUpdateWithAbsentEmployee() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String urlTemplate = String.format("%s%s/%d", ROOT_URL, Constants.EMPLOYEES_PATH, ABSENT_EMPLOYEE_ID);
		final MockHttpServletRequestBuilder requestBuilder = patch(urlTemplate).accept(MediaTypes.HAL_JSON_VALUE)
				.content(UPDATED_EMPLOYEE_CONTENT).contentType(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isNotFound());
	}

	/**
	 * Should delete the {@link Employee}.<br>
	 * Tests a <b>DELETE</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldDeleteEmployee() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = delete(EXPECTED_EMPLOYEE_ID_URL)
				.accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
	}

	/**
	 * Should find the {@link Employee} by id.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldFindEmployeeById() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = get(EXPECTED_EMPLOYEE_ID_URL)
				.accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		checkEmployee(resultActions, EXPECTED_EMPLOYEE_F_NAME, EXPECTED_EMPLOYEE_L_NAME);
	}

	/**
	 * Should get '404 Not Found' error response when searching with the absent
	 * employee's id.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldGetNotFoundErrorOnSearchWithAbsentEmployee() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String urlTemplate = String.format("%s/99999", EMPLOYEES_URL);
		final MockHttpServletRequestBuilder requestBuilder = get(urlTemplate).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isNotFound());
	}

	/**
	 * Should get '500 Internal Server Error' error response when searching with bad
	 * id.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldGetInternalServerErrorOnSearchWithBadId() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String urlTemplate = String.format("%s/ABCDE", EMPLOYEES_URL);
		final MockHttpServletRequestBuilder requestBuilder = get(urlTemplate).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isInternalServerError());
		resultActions.andExpect(jsonPath("message", Matchers.containsString("Failed to convert")));
	}

	/**
	 * Should find the {@link Employee}s by first name and last name.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldFindEmployeesByFirstNameAndLastName() throws Exception {
		// GIVEN
		final String templateUrl = String.format("%s%s/search/findByFirstNameAndLastNameOrderByLastName", ROOT_URL,
				Constants.EMPLOYEES_PATH);
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = get(templateUrl)
				.param("firstName", EXPECTED_EMPLOYEE_F_NAME).param("lastName", EXPECTED_EMPLOYEE_L_NAME)
				.accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		checkEmployeeList(templateUrl, resultActions, 1);
	}

	/**
	 * Should find {@link Employee}s by first name and last name using patterns.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldFindEmployeesUsingLikePatternByFirstNameAndLastName() throws Exception {
		// GIVEN
		final String templateUrl = String.format("%s%s/search/findByFirstNameLikeAndLastNameLikeOrderByLastName",
				ROOT_URL, Constants.EMPLOYEES_PATH);
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = get(templateUrl)//
				.param("firstName", NAME_LIKE).param("lastName", NAME_LIKE).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		checkEmployeeList(templateUrl, resultActions, 2);
	}

	/**
	 * Should find the {@link Employee}s by the department's name.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldFindEmployeesByDepartmentName() throws Exception {
		// GIVEN
		final String templateUrl = String.format("%s%s/search/findByDepartmentNameOrderByLastNameDesc", ROOT_URL,
				Constants.EMPLOYEES_PATH);
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = get(templateUrl).param("name", EXPECTED_DEPARTMENT_NAME)
				.accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("_embedded.employees").isArray());
		resultActions.andExpect(jsonPath("_embedded.employees", Matchers.hasSize(2)));
		// checking last item in list
		resultActions.andExpect(jsonPath("_embedded.employees[1].firstName").value(EXPECTED_EMPLOYEE_F_NAME));
		resultActions.andExpect(jsonPath("_embedded.employees[1].lastName").value(EXPECTED_EMPLOYEE_L_NAME));
		resultActions.andExpect(jsonPath("_embedded.employees[1]._links.self.href").value(EXPECTED_EMPLOYEE_ID_URL));
		resultActions
				.andExpect(jsonPath("_embedded.employees[1]._links.employee.href").value(EXPECTED_EMPLOYEE_ID_URL));
		resultActions.andExpect(
				jsonPath("_embedded.employees[1]._links.department.href").value(EXPECTED_EMPLOYEE_ID_DEP_HREF));
		resultActions.andExpect(jsonPath("_links.self.href").value(templateUrl));
	}

	/**
	 * Checks the {@link Employee}
	 * 
	 * @param resultActions             the {@link ResultActions}
	 * @param expectedEmployeeFirstName the expected {@link Employee}'s first name
	 * @param expectedEmployeeLastName  the expected {@link Employee}'s last name
	 * @throws Exception the {@link Exception}
	 */
	private void checkEmployee(ResultActions resultActions, String expectedEmployeeFirstName,
			String expectedEmployeeLastName) throws Exception {

		resultActions.andExpect(jsonPath("firstName").value(expectedEmployeeFirstName));
		resultActions.andExpect(jsonPath("lastName").value(expectedEmployeeLastName));
		resultActions.andExpect(jsonPath("_links.self.href").value(EXPECTED_EMPLOYEE_ID_URL));
		resultActions.andExpect(jsonPath("_links.employee.href").value(EXPECTED_EMPLOYEE_ID_URL));
		resultActions.andExpect(jsonPath("_links.department.href").value(EXPECTED_EMPLOYEE_ID_DEP_HREF));
	}

	/**
	 * Checks the list of the {@link Employee}s
	 * 
	 * @param templateUrl   the template URL
	 * @param resultActions the {@link ResultActions}
	 * @param listSize      the expected size of the list
	 * @throws Exception the {@link Exception}
	 */
	private void checkEmployeeList(String templateUrl, ResultActions resultActions, int listSize) throws Exception {

		resultActions.andExpect(jsonPath("_embedded.employees").isArray());
		resultActions.andExpect(jsonPath("_embedded.employees", Matchers.hasSize(listSize)));
		resultActions.andExpect(jsonPath("_embedded.employees[0].firstName").value(EXPECTED_EMPLOYEE_F_NAME));
		resultActions.andExpect(jsonPath("_embedded.employees[0].lastName").value(EXPECTED_EMPLOYEE_L_NAME));
		resultActions.andExpect(jsonPath("_embedded.employees[0]._links.self.href").value(EXPECTED_EMPLOYEE_ID_URL));
		resultActions
				.andExpect(jsonPath("_embedded.employees[0]._links.employee.href").value(EXPECTED_EMPLOYEE_ID_URL));
		resultActions.andExpect(
				jsonPath("_embedded.employees[0]._links.department.href").value(EXPECTED_EMPLOYEE_ID_DEP_HREF));
		resultActions.andExpect(jsonPath("_links.self.href").value(templateUrl));
	}
}
