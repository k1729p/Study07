package kp.company.endpoints;

import static kp.TestConstants.CREATED_DEPARTMENT_CONTENT;
import static kp.TestConstants.CREATED_DEPARTMENT_ID_EMP_HREF;
import static kp.TestConstants.CREATED_DEPARTMENT_ID_HREF;
import static kp.TestConstants.CREATED_DEPARTMENT_NAME;
import static kp.TestConstants.DEPARTMENTS_URL;
import static kp.TestConstants.DEP_FIRST_PAGE_HREF;
import static kp.TestConstants.DEP_LAST_PAGE_HREF;
import static kp.TestConstants.DEP_NAME_ON_THIRD_PAGE;
import static kp.TestConstants.DEP_NEXT_PAGE_HREF;
import static kp.TestConstants.DEP_PREV_PAGE_HREF;
import static kp.TestConstants.DEP_PROFILE_HREF;
import static kp.TestConstants.DEP_SEARCH_HREF;
import static kp.TestConstants.DEP_TEST_PAGE_NUMBER;
import static kp.TestConstants.DEP_TEST_PAGE_SIZE;
import static kp.TestConstants.DEP_THIRD_PAGE_EMP_HREF;
import static kp.TestConstants.DEP_THIRD_PAGE_HREF;
import static kp.TestConstants.DEP_THIS_PAGE_HREF;
import static kp.TestConstants.EXPECTED_DEPARTMENT_ID;
import static kp.TestConstants.EXPECTED_DEPARTMENT_ID_EMP_HREF;
import static kp.TestConstants.EXPECTED_DEPARTMENT_ID_URL;
import static kp.TestConstants.EXPECTED_DEPARTMENT_NAME;
import static kp.TestConstants.LARGE_SET_DEPARTMENTS_NUMBER;
import static kp.TestConstants.ROOT_URL;
import static kp.TestConstants.UPDATED_DEPARTMENT_CONTENT;
import static kp.TestConstants.UPDATED_DEPARTMENT_NAME;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Slice;
import org.springframework.hateoas.MediaTypes;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;

import kp.Constants;
import kp.company.TestDatasetLoader;
import kp.company.domain.Department;

/**
 * The tests for the {@link Department} with server-side support using
 * {@link MockMvc}.<br>
 * The endpoints were generated by Spring Data from the repositories.
 */
@SpringBootTest
@AutoConfigureMockMvc
class DepartmentEndpointsTests {

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private TestDatasetLoader testDatasetLoader;

	private static final boolean VERBOSE = false;

	/**
	 * The constructor.
	 */
	DepartmentEndpointsTests() {
		super();
	}

	/**
	 * Should create the {@link Department}.<br>
	 * Tests a <b>POST</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldCreateDepartment() throws Exception {
		// GIVEN
		final MockHttpServletRequestBuilder requestBuilder = post(DEPARTMENTS_URL).accept(MediaTypes.HAL_JSON_VALUE)
				.content(CREATED_DEPARTMENT_CONTENT).contentType(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isCreated());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("name").value(CREATED_DEPARTMENT_NAME));
		resultActions.andExpect(jsonPath("_links.self.href").value(CREATED_DEPARTMENT_ID_HREF));
		resultActions.andExpect(jsonPath("_links.department.href").value(CREATED_DEPARTMENT_ID_HREF));
		resultActions.andExpect(jsonPath("_links.employees.href").value(CREATED_DEPARTMENT_ID_EMP_HREF));
	}

	/**
	 * Should update the {@link Department}.<br>
	 * Tests a <b>PATCH</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldUpdateDepartmentUsingPatch() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = patch(EXPECTED_DEPARTMENT_ID_URL)
				.accept(MediaTypes.HAL_JSON_VALUE).content(UPDATED_DEPARTMENT_CONTENT)
				.contentType(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		checkDepartment(resultActions, UPDATED_DEPARTMENT_NAME);
	}

	/**
	 * Should update the {@link Department}.<br>
	 * Tests a <b>PUT</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldUpdateDepartmentUsingPut() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = put(EXPECTED_DEPARTMENT_ID_URL)
				.accept(MediaTypes.HAL_JSON_VALUE).content(UPDATED_DEPARTMENT_CONTENT)
				.contentType(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		checkDepartment(resultActions, UPDATED_DEPARTMENT_NAME);
	}

	/**
	 * Should get '404 Not Found' error response when updating the absent
	 * {@link Department}.<br>
	 * Tests a <b>PATCH</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldGetNotFoundErrorOnUpdateWithAbsentDepartment() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String urlTemplate = String.format("%s/99999", DEPARTMENTS_URL);
		final MockHttpServletRequestBuilder requestBuilder = patch(urlTemplate).accept(MediaTypes.HAL_JSON_VALUE)
				.content(UPDATED_DEPARTMENT_CONTENT).contentType(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isNotFound());
	}

	/**
	 * Should delete the {@link Department}.<br>
	 * Tests a <b>DELETE</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldDeleteDepartment() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = delete(EXPECTED_DEPARTMENT_ID_URL)
				.accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
	}

	/**
	 * Should find {@link Department}s on third page.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldFindDepartmentsOnThirdPage() throws Exception {
		// GIVEN
		testDatasetLoader.loadLargeTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = get(DEPARTMENTS_URL)
				.param("page", String.valueOf(DEP_TEST_PAGE_NUMBER)).param("size", String.valueOf(DEP_TEST_PAGE_SIZE))
				.param("sort", "name,asc").accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("_embedded.departments").isArray());
		resultActions.andExpect(jsonPath("_embedded.departments", Matchers.hasSize(DEP_TEST_PAGE_SIZE)));
		resultActions.andExpect(jsonPath("_embedded.departments[0].name").value(DEP_NAME_ON_THIRD_PAGE));
		resultActions.andExpect(jsonPath("_embedded.departments[0]._links.self.href")//
				.value(DEP_THIRD_PAGE_HREF));
		resultActions.andExpect(jsonPath("_embedded.departments[0]._links.department.href")//
				.value(DEP_THIRD_PAGE_HREF));
		resultActions.andExpect(jsonPath("_embedded.departments[0]._links.employees.href")//
				.value(DEP_THIRD_PAGE_EMP_HREF));

		resultActions.andExpect(jsonPath("_links.first.href").value(DEP_FIRST_PAGE_HREF));
		resultActions.andExpect(jsonPath("_links.prev.href").value(DEP_PREV_PAGE_HREF));
		resultActions.andExpect(jsonPath("_links.self.href").value(DEP_THIS_PAGE_HREF));
		resultActions.andExpect(jsonPath("_links.next.href").value(DEP_NEXT_PAGE_HREF));
		resultActions.andExpect(jsonPath("_links.last.href").value(DEP_LAST_PAGE_HREF));
		resultActions.andExpect(jsonPath("_links.profile.href").value(DEP_PROFILE_HREF));
		resultActions.andExpect(jsonPath("_links.search.href").value(DEP_SEARCH_HREF));

		resultActions.andExpect(jsonPath("page").exists());
		resultActions.andExpect(jsonPath("page.size").value(DEP_TEST_PAGE_SIZE));
		resultActions.andExpect(jsonPath("page.totalElements").value(LARGE_SET_DEPARTMENTS_NUMBER));
		resultActions.andExpect(jsonPath("page.totalPages").value(LARGE_SET_DEPARTMENTS_NUMBER / DEP_TEST_PAGE_SIZE));
		resultActions.andExpect(jsonPath("page.number").value(DEP_TEST_PAGE_NUMBER));
	}

	/**
	 * Should find the {@link Department} by id.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldFindDepartmentById() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final MockHttpServletRequestBuilder requestBuilder = get(EXPECTED_DEPARTMENT_ID_URL)
				.accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		checkDepartment(resultActions, EXPECTED_DEPARTMENT_NAME);
	}

	/**
	 * Should get '404 Not Found' error response when searching with the absent
	 * {@link Department} id.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldGetNotFoundErrorOnSearchWithAbsentDepartment() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String urlTemplate = String.format("%s/99999", DEPARTMENTS_URL);
		final MockHttpServletRequestBuilder requestBuilder = get(urlTemplate).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isNotFound());
	}

	/**
	 * Should get '500 Internal Server Error' error response when searching with bad
	 * id.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldGetInternalServerErrorOnSearchWithBadId() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String urlTemplate = String.format("%s/ABCDE", DEPARTMENTS_URL);
		final MockHttpServletRequestBuilder requestBuilder = get(urlTemplate).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isInternalServerError());
		resultActions.andExpect(jsonPath("message", Matchers.containsString("Failed to convert")));
	}

	/**
	 * Should find the {@link Department}s on third {@link Slice}.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldFindDepartmentsOnThirdSlice() throws Exception {
		// GIVEN
		testDatasetLoader.loadLargeTestDataset();
		final String templateUrl = String.format("%s/search/findAllByOrderByName", Constants.DEPARTMENTS_PATH);
		final MockHttpServletRequestBuilder requestBuilder = get(templateUrl)
				.param("page", String.valueOf(DEP_TEST_PAGE_NUMBER)).param("size", String.valueOf(DEP_TEST_PAGE_SIZE))
				.param("sort", "name,asc").accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("_embedded.departments").isArray());
		resultActions.andExpect(jsonPath("_embedded.departments", Matchers.hasSize(DEP_TEST_PAGE_SIZE)));

		resultActions.andExpect(jsonPath("_embedded.departments[0].name").value(DEP_NAME_ON_THIRD_PAGE));
		resultActions.andExpect(jsonPath("_embedded.departments[0]._links.self.href")//
				.value(DEP_THIRD_PAGE_HREF));
		resultActions.andExpect(jsonPath("_embedded.departments[0]._links.department.href")//
				.value(DEP_THIRD_PAGE_HREF));
		resultActions.andExpect(jsonPath("_embedded.departments[0]._links.employees.href")//
				.value(DEP_THIRD_PAGE_EMP_HREF));
		resultActions
				.andExpect(jsonPath("_links.self.href").value(ROOT_URL + templateUrl + "?page=2&size=3&sort=name,asc"));
	}

	/**
	 * Should find the {@link Department} by name.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldFindDepartmentsByName() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String templateUrl = String.format("%s/search/findByName?name=%s", Constants.DEPARTMENTS_PATH,
				EXPECTED_DEPARTMENT_NAME);
		final MockHttpServletRequestBuilder requestBuilder = get(templateUrl).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("_embedded.departments").isArray());
		resultActions.andExpect(jsonPath("_embedded.departments", Matchers.hasSize(1)));
		resultActions.andExpect(jsonPath("_embedded.departments[0].name").value(EXPECTED_DEPARTMENT_NAME));
		resultActions
				.andExpect(jsonPath("_embedded.departments[0]._links.self.href").value(EXPECTED_DEPARTMENT_ID_URL));
		resultActions.andExpect(
				jsonPath("_embedded.departments[0]._links.department.href").value(EXPECTED_DEPARTMENT_ID_URL));
		resultActions.andExpect(
				jsonPath("_embedded.departments[0]._links.employees.href").value(EXPECTED_DEPARTMENT_ID_EMP_HREF));
		resultActions.andExpect(jsonPath("_links.self.href").value(ROOT_URL + templateUrl));
	}

	/**
	 * Should count the {@link Department}s by name.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldCountDepartmentsByName() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String templateUrl = String.format("%s/search/countByName?name=%s", Constants.DEPARTMENTS_PATH,
				EXPECTED_DEPARTMENT_NAME);
		final MockHttpServletRequestBuilder requestBuilder = get(templateUrl).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("$").value("1"));
	}

	/**
	 * Should count the employees in the {@link Department} found by id.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldCountEmployeesInDepartment() throws Exception {
		// GIVEN
		testDatasetLoader.loadTestDataset();
		final String templateUrl = String.format("%s/search/countByCustomQuery?id=%d", Constants.DEPARTMENTS_PATH,
				EXPECTED_DEPARTMENT_ID);
		final MockHttpServletRequestBuilder requestBuilder = get(templateUrl).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("departmentName").value(EXPECTED_DEPARTMENT_NAME));
		resultActions.andExpect(jsonPath("employeesCount").value("2"));
	}

	/**
	 * Should delete the {@link Department}s by name.<br>
	 * Tests a <b>GET</b> request.
	 * 
	 * @throws Exception the {@link Exception}
	 */
	@Test
	void shouldDeleteDepartmentsByName() throws Exception {
		testDatasetLoader.loadTestDataset();
		final String templateUrl = String.format("%s/search/deleteByName?name=%s", Constants.DEPARTMENTS_PATH,
				EXPECTED_DEPARTMENT_NAME);
		final MockHttpServletRequestBuilder requestBuilder = get(templateUrl).accept(MediaTypes.HAL_JSON_VALUE);
		// WHEN
		final ResultActions resultActions = mockMvc.perform(requestBuilder);
		// THEN
		if (VERBOSE) {
			resultActions.andDo(print());
		}
		resultActions.andExpect(status().isOk());
		resultActions.andExpect(content().contentType(MediaTypes.HAL_JSON_VALUE));
		resultActions.andExpect(jsonPath("$").value("1"));
	}

	/**
	 * Checks the {@link Department}
	 * 
	 * @param resultActions          the {@link ResultActions}
	 * @param expectedDepartmentName the expected {@link Department}'s name
	 * @throws Exception the {@link Exception}
	 */
	private void checkDepartment(ResultActions resultActions, String expectedDepartmentName) throws Exception {

		resultActions.andExpect(jsonPath("name").value(expectedDepartmentName));
		resultActions.andExpect(jsonPath("_links.self.href").value(EXPECTED_DEPARTMENT_ID_URL));
		resultActions.andExpect(jsonPath("_links.department.href").value(EXPECTED_DEPARTMENT_ID_URL));
		resultActions.andExpect(jsonPath("_links.employees.href").value(EXPECTED_DEPARTMENT_ID_EMP_HREF));
	}

}
